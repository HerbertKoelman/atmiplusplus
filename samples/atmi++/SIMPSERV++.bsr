/*
 * #ident	"@(#) $Id: SIMPSERV.c,v 1.2 2006/09/22 07:07:04 herbert Exp
 * $"
 */

#include <sys/utsname.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>
#include <algorithm>
#include <string>
#include <cstring>
#include <cctype>
#include <iostream>

#include <stdio.h>

/*
#include <atmi.h>
#include <userlog.h>
#include <signal.h>
#include <Usignal.h>
*/

#include "sample_fml_table.h"
#include <atmi++.h>

using namespace std;
using namespace atmi;

/*
 * This function performs the actual service requested by the client. Its
 * argument is a structure containing among other things a pointer to the
 * data buffer, and the length of the data buffer.
 */
extern "C" void TOUPPER(TPSVCINFO * rqst)
{
  int ret = TPFAIL;

  try {
    Buffer buffer ((FBFR32 *)rqst->data );
    //buffer.set_buffer ( (FBFR32 *)rqst->data );

    TField<string> name ( EMPNAME );
    buffer.get ( &name );

    userlog ( (char *)"converting %s to uppercase.", name.c_str() );

    string upper = name;
    transform(upper.begin(), upper.end(),upper.begin(), ::toupper);

    name = upper ;
    userlog ( (char *)"name is now %s (%s).", name.c_str(), upper.c_str() );

    buffer.set ( &name );

    ret = TPSUCCESS;

  } catch ( TuxedoException &terr ) {
    userlog ( (char *)"Service call TOUPPER failed. %s", terr.what() );
  } catch ( BufferException &berr ) {
    userlog ( (char *)"Service call TOUPPER failed. %s", berr.what() );
  } catch ( Exception &err ) {
    userlog ( (char *)"Service call TOUPPER failed. %s", err.what() );
  } catch ( ... ) {
    userlog ((char *)"unexpected exception was thrown, TOUPPER faild.");
  }

  /* Return the transformed buffer to the requestor. */
  tpreturn(ret, 0, rqst->data, rqst->len, 0);
}

// ATMI / C++ Interface section --------------------------------------------

/*
   signal handler
 */
void sig_handler(int sig) {
  switch (sig) {
    case SIGHUP:
      break;
    case SIGTERM:
      break;
    default:
      userlog((char *) "Handling an unknown signal (%d).", sig);
  }
}


int tpsvrinit(int argc, char *argv[]) {

  return (0);
}

void tpsvrdone() {

  userlog((char *)"server done");
}

