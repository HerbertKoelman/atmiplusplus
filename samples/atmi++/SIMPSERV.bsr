/*
 * #ident	"@(#) $Id: SIMPSERV.c,v 1.2 2006/09/22 07:07:04 herbert Exp
 * $" 
 */

#include <sys/utsname.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

#include <stdio.h>
#include <ctype.h>
#include <atmi.h>		/* TUXEDO Header File */
#include <userlog.h>		/* TUXEDO Header File */
#include <signal.h>
#include <Usignal.h>

int sleepy ;

/*
  signal handler
*/
void sig_handler(int sig)
{

    switch (sig) {
    case SIGHUP:
			sleepy = ( sleepy == 0 ? 40 : 0 ); ;
			userlog ((sleepy == 0 ? "No sleep" : "Sleeping sec." ));
	break;

    default:
	userlog("Handling an unknown signal (%d).", sig);
    }
}


/*
 * tpsvrinit is executed when a server is booted, before it begins processing
 * requests.  It is not necessary to have this function. Also available is
 * tpsvrdone (not used in this example), which is called at server shutdown
 * time. 
 */
int tpsvrinit(int argc, char *argv[])
{
    /* userlog writes to the central TUXEDO message log */
    userlog("Welcome to the simple server version $Revision: 50 $");
    Usignal(SIGHUP, sig_handler);
		
	sleepy = 0 ;
    
    tpopen ();

    return (0);
}

void tpsvrdone()
{

    userlog("server done");
}

/*
 * This function performs the actual service requested by the client. Its
 * argument is a structure containing among other things a pointer to the
 * data buffer, and the length of the data buffer. 
 */
#ifdef __cplusplus
extern "C" void HELLO(TPSVCINFO * rqst)
#else
void HELLO(TPSVCINFO * rqst)
#endif
{
	int i;

  printf ("Hello world %s.\n", rqst->data );

	tpreturn(TPSUCCESS, 0, rqst->data, rqst->len, 0);
}

/*
 * This function performs the actual service requested by the client. Its
 * argument is a structure containing among other things a pointer to the
 * data buffer, and the length of the data buffer. 
 */
#ifdef __cplusplus
extern "C" void TOUPPER(TPSVCINFO * rqst)
#else
void TOUPPER(TPSVCINFO * rqst)
#endif
{
	int cd ;
	int i;

	long len = 256 ;
	char *buf = tpalloc ( "STRING", NULL, len ); 

	for (i = 0; i < rqst->len; i++)
	rqst->data[i] = toupper(rqst->data[i]);

	cd = tpacall ( "HELLO", rqst->data, rqst->len, 0 );

	if ( sleepy > 0 ) sleep ( sleepy );

	sleep ( 1 );

	printf ( "TOUPPER - getrply %s.\n", rqst->data );
	tpgetrply ( &cd, &buf, &len, 0 );
	printf ( "TOUPPER - got rply %s.\n", rqst->data );

	/* Return the transformed buffer to the requestor. */
	tpreturn(TPSUCCESS, 0, rqst->data, rqst->len, 0);
}
