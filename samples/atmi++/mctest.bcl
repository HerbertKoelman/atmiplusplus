/* $Id$

   Sample Tuxedo client using ATMI++ libray.

 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <iostream>
#include <fstream>
#include "atmi++.h"
#include <Thread.h>
#include <nl_types.h>

#include "sample_fml_table.h"

using namespace std;
using namespace atmi;

class MultiContextClient : public AbstractClient, Thread {
  public:

    MultiContextClient () : AbstractClient ( true, "mctest" ) {
    };

    void run (){
      try {

        cout << "Running in multicontext mode. Context is : " << get_context () << "." << endl;

        ATp TOUPPER = new_tp_instance ( "TOUPPER" );
        char *message = (char *)TOUPPER->allocate ( "STRING", NULL, 10 );
        strncpy (message, "hello",10);

        long olen = 0;
        TOUPPER->call ( message, 10, &message, &olen );
        cout << "TOUPPER returned "  << message << endl;

      }catch ( BufferException buffErr ) {
        cerr << buffErr.what() << "Ferror : " << buffErr.getFerror() <<endl;
      } catch ( DiagnosticException qerr ) {
        cerr << qerr.what() << endl;
      } catch ( TuxedoException terr ) {
        cerr << terr.what() << endl;
      } catch ( Exception err ) {
        cerr << err.what() << endl;
      } catch ( exception uerr ) {
        cerr << uerr.what() << endl;
      }
    }

};

// program main -------------------------------------------------

int main ( int argc, char **argv ) {

  try {

    string line;
    string tuxconfig;

    {
      MultiContextClient mc2 ;
      {
        MultiContextClient mc1 ;
        mc1.run ();
        cout << "press any key to end context " << mc1.get_context() << endl;
        getline(cin, line);
      }

      mc2.run ();
      cout << "press any key to end context " << mc2.get_context() << endl ;
      getline(cin, line);
    }

    cout << "press any key to end program " << endl ;
    getline(cin, line);
  } catch ( Exception err ) {
    cerr << err.what() << endl;
  } catch ( exception uerr ) {
    cerr << uerr.what() << endl;
  }

  return 9999;
}
