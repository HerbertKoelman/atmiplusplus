/* $Id: tptest.C 79 2007-08-18 17:30:26Z hkoelman $

   Sample Tuxedo client using ATMI++ libray.

 */
#include <algorithm>
#include <string>
#include <cstring>
#include <iostream>
#include <Thread.h>
#include <YamlParser.h>
#include <Logger.h>
#include <atmi++.h>

using namespace std;
using namespace atmi;

class TPtest : public AbstractClient, Thread {
  public:

    TPtest () : AbstractClient ("tptest"){
    };

    void run () {

      // StandardLogger logger ;
      ULOGLogger logger (INFO) ;
      logger.info ("\n\n");
      int ret = -1;
      logger.info ("Starting client program tptest.");
      logger.info ( "version: %s." , "Hello world");

      try {

        Tp tp ( "TOUPPER" );
        int urcode = 0;

        try {


          Buffer buffer;

          TField<string> name ( "EMPNAME" );
          name = (string) "Herbert";

          buffer.add ( &name );

          logger.warning ("Calling service TOUPPER (%s), context: %d", name.c_str() , get_context());

          try {

            tp.begin();

            //switch ((ret = tp.call ( message, len, (char **)&message, (long *)&len, (int *)&urcode, 1, 1 ))) {
            //switch ((ret = tp.call ( message, len, &message, &len, (int *) NULL, 1, 1 ))) {
            //switch ((ret = tp.call ( message, len, &message, &len ))) {
            //ret = tp.acall ( &buffer );
            //switch ((ret =tp.reply ( &buffer, NULL, &ret))) {

            ret = tp.call ( &buffer );
            switch (ret) {
              case 0:
                break;
              case -1:
                logger.error ("TOUPPER returned TPFAIL." );
                break;
              default:
                logger.info ( "TOUPPER returned URCODE: %d", ret);
                buffer.print();
            }

            buffer.get ( &name );
            logger.info ( "Call returned: %s.", name.c_str() );

            tp.commit();
            logger.warning ("Transcation was committed.");
          } catch ( ... ){
            tp.abort();
            logger.error("Transcation was aborted."); 
            throw;
          }

        } catch ( ServiceException& serr ) {
          logger.error ( "Service Exception catched. tpcall failed." );
          logger.error ( "What: %s", serr.what () );
        } catch ( TuxedoException& terr ) {
          logger.error ( "Tuxedo Exception catched. tpcall failed." );
          logger.error ( "What: %s %s", terr.what () , terr.getTperrdetail() );
        };

        logger.info ( "Ending program." );
      } catch ( TuxedoException& terr ) {
        logger.error ( terr.what () );
      } catch (BufferException berr ) {
        logger.error ( berr.what() );
      }

    };
};

int main ( int argc, char **argv ) {

  int ret = 0;

  try {
    cout << "using lib ATMI++ " << Tuxedo::version() << endl;
    YamlParser yp ("tuxedo.yml");
    yp.parse("tptest");
    map<string,string> p = yp.get_properties();
    cout << "tptest.tuxconfig: " << p["tptest.tuxconfig"] << endl;

    TPtest tp;
    tp.run ();

  } catch ( Exception& err ) {
    cerr << err.what () << endl;
  } catch ( YamlException& err){
    cerr << err.what() << endl;
  } catch (exception uerr ) {
    cerr << uerr.what() << endl;
  };

  return ret;
}
