/* $Id: tptest.C 79 2007-08-18 17:30:26Z hkoelman $

   Sample Tuxedo client using ATMI++ libray.

 */
#include <string.h>
#include <iostream>
#include <Thread.h>
#include <atmi++.h>

using namespace std;
using namespace atmi;

class TPtest : public AbstractClient, Thread {
  public:

    TPtest () : AbstractClient ("tptest"){
    };

    void run () {

      int ret = -1;
      cout << "Starting client program tptest." << endl;

      try {

        Tp tp ( "TOUPPER" );
        int urcode = 0;

        try {


          Buffer buffer;

          TField<string> name ( "EMPNAME" );
          name = (string) "Herbert";

          buffer.add ( &name );

          cout << "  Calling service TOUPPER (" << name  << "), context: " << get_context() << "." << endl;

          try {

            tp.begin();

            //switch ((ret = tp.call ( message, len, (char **)&message, (long *)&len, (int *)&urcode, 1, 1 ))) {
            //switch ((ret = tp.call ( message, len, &message, &len, (int *) NULL, 1, 1 ))) {
            //switch ((ret = tp.call ( message, len, &message, &len ))) {
            //ret = tp.acall ( &buffer );
            //switch ((ret =tp.reply ( &buffer, NULL, &ret))) {

            ret = tp.call ( &buffer );
            switch (ret) {
              case 0:
                break;
              case -1:
                cerr << "  TOUPPER returned TPFAIL." << endl;
                break;
              default:
                cerr << "  TOUPPER returned URCODE: " << ret << endl;
                cout << "  Call returned: " << endl;
                buffer.print();
            }

            buffer.get ( &name );
            cout << "  Call returned: " << name << "." << endl;

            tp.commit();
            cout << "  Transcation was committed." << endl ;
          } catch ( ... ){
            tp.abort();
            cout << "  Transcation was aborted." << endl ;
            throw;
          }

        } catch ( ServiceException& serr ) {
          cerr << "  Service Exception catched. tpcall failed." << endl;
          cerr << "  What: " << serr.what () << endl;
        } catch ( TuxedoException& terr ) {
          cerr << "  Tuxedo Exception catched. tpcall failed." << endl;
          cerr << "  What: " << terr.what () << ". " << terr.getTperrdetail() << endl;
        };

        cout << "Ending program." << endl;
      } catch ( TuxedoException& terr ) {
        cerr << terr.what () << endl;
      } catch (BufferException berr ) {
        cerr << berr.what() << endl;
      };

    };
};

int main ( int argc, char **argv ) {

  int ret = 0;

  try {

    cout << "using lib ATMI++ " << Tuxedo::version() << endl;
    TPtest tp;
    tp.run ();

  } catch ( Exception& err ) {
    cerr << err.what () << endl;
  } catch (exception uerr ) {
    cerr << uerr.what() << endl;
  };

  return ret;
}
