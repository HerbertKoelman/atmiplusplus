/* $Id$

   Sample Tuxedo client using ATMI++ libray.

 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <iostream>
#include <fstream>
#include <typeinfo>
#include "atmi/atmi++.hpp"

#include "sample_fml_table.h"

class buffer_test : public atmi::abstract_client {
  public:
    buffer_test (): atmi::abstract_client ("btest"){
    };

    int run ( int argc, char **argv ){
      try {

        atmi::buffer b (100), a;

        std::cout << "atmi::buffer b: " << b.used() << "/" << b.unused() <<", size: " << b.size() << ", chksum: " << b.chksum() <<  std::endl;

        atmi::Tfield<string> nom    ("IMS_SVC_NAME");
        atmi::Tfield<char *> carray ("IMS_SEG_DATA");

        nom = "T031";
        char data[173]={0xf5,0xf3,0x11,0x40,0x40,0x1d,0x40,0xe3,0xf0,0xf0,0xf1,0x00,0xf1,0xf3,0xf4,0xf4,0xf4,0xf2,0xf0,0xf3,0xc9,0xd1,0x2d,0x8f,0x1f,0x8f,0x47,0x80,0x00,0xd1,0x2d,0x8f,0x1f,0x58,0x59,0x00,0x00,0xd1,0x2d,0x8f,0x1f,0xb0,0x06,0xf0,0x00,0xd1,0x2d,0x8f,0x1f,0xb3,0xdf,0x00,0x00,0x01,0x08,0x00,0x00,0x04,0x01,0x00,0x00,0x02,0x00,0x31,0x33,0x34,0x34,0x34,0x32,0x34,0xe0,0x0b,0x2f,0x3b,0x11,0xe1,0x17,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x32,0x31,0x30,0x31,0x39,0x42,0x41,0x52,0x20,0x44,0x45,0x20,0x4c,0x27,0x45,0x54,0x41,0x4e,0x47,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x01,0x30,0x30,0x30,0x30,0x30,0x00,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        carray.set_char_array(data, 173);

        std::cout << "Added fields: " << std::endl;
        b.set ( nom );
        b.set ( carray );
        b.print ();

        atmi::Tfield<char *> copy ("IMS_SEG_DATA");
        b.get ( copy );

        std::cout << copy.what() << std::endl;
        long len = copy.length();                  //copy.length();
        char *cav = new char[len];
        copy.get_char_array ( cav, len );

        std::cout << "[";
        for ( int x = 0; x < len; x++ ) {
          std::cout << std::hex <<  cav[x] ;
        }
        std::cout << "]" << std::endl;

        b.print ();

        std::cout << "-------------------" << std::endl ;

      }catch ( atmi::buffer_exception &err ) {
        cerr << err.what() << ". Ferror : " << err.error() <<std::endl;
      } catch ( atmi::atmi_exception &err ) {
        cerr << err.what() << std::endl;
      } catch ( std::exception &err ) {
        cerr << err.what() << std::endl;
      }

      return 9999;
    }

};

// program main -------------------------------------------------

int main ( int argc, char **argv ) {

  try {

    std::cout << "atmi::buffer sample program (" << atmi::cpp_atmi_version() <<")." << std::endl;
    std::cout << "setting up";
    buffer_test btest;

    std::cout << ", starting up" ;
    btest.run ( argc, argv );

  } catch ( atmi::atmi_exception &err){
    cerr << std::endl << err.what() << std::endl;
  } catch ( std::exception &err ) {
    cerr << std::endl << err.what() << std::endl;
  }
  std::cout << ", done." << std::endl;

  return 0;
}
