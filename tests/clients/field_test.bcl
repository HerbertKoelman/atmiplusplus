/* $Id$

   Sample Tuxedo client using ATMI++ libray.

 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <iostream>
#include <fstream>
#include <typeinfo>
#include "atmi/atmi++.hpp"

#include "sample_fml_table.h"

void line(){
  std::cout << std::endl << "---------------------------" << std::endl << std::endl;
}

void test(const char *description){
  std::cout << "TEST >>>> " << description << std::endl;
}

int string_field_tests(){
  int status = EXIT_SUCCESS;

  std::cout << std::endl << __FUNCTION__ << "---------------------------" << std::endl << std::endl;

  {
    atmi::Tfield<std::string,EMPNAME>   empname;
    empname = "empname";
    std::cout << empname.name() << ": " << empname << ". " << empname.what() << std::endl ;

    atmi::Tfield<std::string,BADFLDID> _empname(EMPNAME);
    _empname = "herbert koelman";
    std::cout << _empname.name() << ": " << (std::string) _empname << ". " << _empname.what() << std::endl ;

    test("succesful");
  }

  line();

  return status ;
}

int template_field_tests(){
  int status = EXIT_SUCCESS;

  std::cout << std::endl << __FUNCTION__ << "---------------------------" << std::endl << std::endl;

  {
    test("IMPID field ID: ");

    atmi::Tfield<long> empid_(EMPID);
    std::auto_ptr<atmi::field> empid_ptr(new atmi::Tfield<long, EMPID>);
    std::cout << empid_ptr->name() << "(PTR): " << empid_ptr->what() << std::endl;

    atmi::Tfield<long, EMPID> empid;
    empid = 10;
    std::cout << empid.name() << ": " << empid << std::endl << "  " << empid.what() << std::endl;

    test("succesful");
  }

  {
    test ("IMPID field name");

    atmi::Tfield<long> empid("EMPID");
    empid = 10;
    std::cout << empid.name() << ": " << empid << std::endl << "  " << empid.what() << std::endl;

    test("succesful");
  }

  line();

  {
    std::cout << "TEST >>>> Tfields type mismatch detection: " << std::endl;

    try {
      atmi::Tfield<short> empid(EMPID);
      status = EXIT_FAILURE;
    }catch ( std::exception &err ){
      std::cerr << err.what() << std::endl;
    }

    try {
      atmi::Tfield<short> empid("EMPID");
      status = EXIT_FAILURE;
    }catch ( std::exception &err ){
      std::cerr << err.what() << std::endl;
    }
  }

  line();

  return status ;
}

int main ( int argc, char **argv ) {

  auto status = EXIT_FAILURE;
  try {

    std::cout << "START of field sample program (" << atmi::cpp_atmi_version() <<")." << std::endl;

    // status = template_field_tests();
    status = string_field_tests();

    std::cout << "END of field sample program" << std::endl ;
    status = EXIT_SUCCESS;

  } catch ( std::exception &err ) {
    std::cerr << "field test failed. " << err.what() << std::endl;
  }

  return status;
}
