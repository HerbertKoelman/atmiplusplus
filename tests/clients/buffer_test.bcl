/* $Id$

   Sample Tuxedo client using ATMI++ libray.

 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <iostream>
#include <fstream>
#include <typeinfo>
#include "atmi/atmi++.hpp"

#include "sample_fml_table.h"

using namespace std;
using namespace atmi;

class BTest : public abstract_client {
  public:
    BTest () : abstract_client (const_cast<char *>("btest")){
    };

    int run ( int argc, char **argv ){
      try {

        buffer b (100), a;
        /*
           const char *types[5] = { typeid(short).name(), typeid(int).name() };
           cout << "Stored: " << types[0] << endl;
           cout << "Stored: " << types[1] << " is a " << endl;
           if(strcmp ( typeid(int).name(), types[1]) == 0 ){
           cout << "same type int." << endl;
           }
           cout << "Type id " << typeid(long).name() << endl;
         */

        cout << "buffer b: " << b.used() << "/" << b.unused() <<", size: " << b.size() << ", chksum: " << b.chksum() <<  endl;

        Tfield<string> prenom ( EMPNAME );
        Tfield<long>   empid ( EMPID );
        Tfield<long>   empzip ( EMPZIP );
        Tfield<string> nom ( EMPNAME );
        Tfield<char *> carray ( SRVCDAY );
        Tfield<char *> copy ( SRVCDAY );

        prenom = "herbert";
        nom = "this is a char *";
        empid = 2;
        carray.set_char_array("helloworld\0rray", sizeof ("helloworld\0rray"));
        copy = carray;

        cout << "Added fields: " << endl;
        b.add ( &empid );
        b.add ( &nom );
        b.add ( &prenom );
        b.add ( &carray );
        b.add ( &copy );
        b.print ();

        cout << "get copy" << endl;
        b.get ( &copy );

        cout << copy.what() << endl;
        long len = 5;                  //copy.length();
        char *cav = new char[len];
        copy.get_char_array ( cav, len );
        for ( int x = 0; x < len; x++ ) {
          cout << "'"<< cav[x]<<"',";
        }
        cout << endl;

        cout << "Setting empid value: " << endl;
        empid = 22;
        b.set ( &empid );
        b.print ();

        cout << "size : " << b.size();
        b.pack ();
        cout << ", after pack: " << b.size() << endl;

        cout << "buffer (in the end): " << b.used() << "/" << b.unused() <<", size: " << b.size() << ", chksum: " << b.chksum() <<  endl;

        cout << "wrapping buffer." << endl ;
        buffer wrapper ( b.get_buffer());
        nom = "this was added into a wrapper instance of buffer.";
        wrapper.set (&nom );
        wrapper.print ();

        cout << "transforming a buffer into a wrapped buffer." << endl;
        buffer wrapper1;
        wrapper1.set_buffer ( wrapper.get_buffer());
        prenom = "this was set by a wrapper";
        wrapper1.set ( &prenom );
        wrapper1.print();

      }catch ( atmi::buffer_exception &err ) {
        cerr << err.what() << ". Ferror : " << err.error() <<endl;
      } catch ( atmi::atmi_exception &err ) {
        cerr << err.what() << endl;
      } catch ( exception &err ) {
        cerr << err.what() << endl;
      }

      return 9999;
    }

};

// program main -------------------------------------------------

int main ( int argc, char **argv ) {

  try {

    cout << "buffer sample program (" << atmi::cpp_atmi_version() <<")." << endl;
    BTest btest;

    btest.run ( argc, argv );

  } catch ( atmi::atmi_exception &err){
    cerr << err.what() << endl;
  } catch ( exception &err ) {
    cerr << err.what() << endl;
  }

  return 9999;
}
