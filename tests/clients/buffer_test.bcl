/* $Id$

   Sample Tuxedo client using ATMI++ libray.

 */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <string>
#include <iostream>
#include <fstream>
#include <typeinfo>
#include "atmi/atmi++.hpp"

#include "sample_fml_table.h"

template< class T, FLDID32 F = 0 >
class _field: public atmi::Tfield<T> {
  public:
    _field(): atmi::Tfield<T>(F){
    }

    _field( FLDID32 id ): atmi::Tfield<T>(id){
    }

    T operator=( T v ){
      atmi::Tfield<T>::value = v;

      return atmi::Tfield<T>::value ;
    }
};

typedef _field<std::string,EMPNAME> prenom_t;
typedef _field<long,EMPID>   empid_t;
typedef _field<std::string>  void_t;

class fields {
  public:
    fields(){
      prenom = "hello world" ;
      std::cout << __FUNCTION__ << ": " << prenom << std::endl ;
    }

  private:
    prenom_t prenom ;
};


class field_empid: public atmi::Tfield<long> {
  public:
    field_empid(): atmi::Tfield<long>(EMPID){
    }

};

class buffer_test : public atmi::abstract_client {
  public:
    buffer_test (): atmi::abstract_client ("btest"){
    };

    int run ( int argc, char **argv ){
      try {

        atmi::buffer b (100), a;
        /*
           const char *types[5] = { typeid(short).name(), typeid(int).name() };
           std::cout << "Stored: " << types[0] << std::endl;
           std::cout << "Stored: " << types[1] << " is a " << std::endl;
           if(strcmp ( typeid(int).name(), types[1]) == 0 ){
           std::cout << "same type int." << std::endl;
           }
           std::cout << "Type id " << typeid(long).name() << std::endl;
         */

        std::cout << "atmi::buffer b: " << b.used() << "/" << b.unused() <<", size: " << b.size() << ", chksum: " << b.chksum() <<  std::endl;

        atmi::Tfield<atmi::carray>   unknown_field;
        unknown_field.set_id(SRVCDAY);
        unknown_field.set_char_array("salut les amis\0rray", 19);

        atmi::Tfield<std::string> prenom ( EMPNAME );
        atmi::Tfield<long>   empid ( EMPID );
        atmi::Tfield<long>   empzip ( EMPZIP );
        atmi::Tfield<std::string> nom ( EMPNAME );
        atmi::Tfield<char *> carray ( SRVCDAY );
        atmi::Tfield<char *> copy ( SRVCDAY );

        prenom = "herbert";
        nom = "this is a char *";
        empid = 2;
        carray.set_char_array("hello world\0rray", 16);

        std::cout << "--------------------------------------" << std::endl << std::endl ;
        std::cout << "Direct carray buffer access" << std::endl ;
        // const char *direct_access = carray ;
        // auto direct_access_length = carray.length();

        for ( auto x = 0; x < carray.length() ; x++ ){
          // printf("%c - %c\n", direct_access[x], carray[x]);
          printf("%c\n", carray[x]);
        }
        printf("\n");
        carray[1] = 'X' ;
        printf("changed character 1 to X -> %c\n", carray[1]);

        std::cout << "--------------------------------------" << std::endl << std::endl ;
        std::cout << "copy carrays" << std::endl;
        copy = carray;

        std::cout << "--------------------------------------" << std::endl << std::endl ;
        std::cout << "Adding fields into FML buffer: " << std::endl;
        b.add(unknown_field);
        b.add ( empid );
        b.add ( nom );
        b.add ( prenom );
        b.set ( carray );
        b.print ();
        std::cout << "--------------------------------------" << std::endl << std::endl ;

        std::cout << "get SRVCDAY value from FML buffer" << std::endl;
        b.get ( copy );
        std::cout << "there should be enough memory no re-allocation expected" << std::endl;
        b.get ( copy );

        std::cout << "--------------------------------------" << std::endl << std::endl ;

        copy.set_char_array("0123456789", 10);
        std::cout << "buffer carray contains " << copy.length() << " characters" << std::endl ;
        //b.remove(copy);
        b.set(copy);
        b.print();

        atmi::Tfield<char *> resize_control ( SRVCDAY );
        std::cout << "resize control initial carray length is  " << resize_control.length() << std::endl;
        resize_control.set_char_array("012345678901245678900123456789", 30);
        b.get(resize_control);

        std::cout << "de-allocate ressources" << std::endl ;
        resize_control.free_ressources();
        std::cout << "  firt call to get from buffer, size before call " << resize_control.length() << std::endl ;
        b.get(resize_control);
        std::cout << "  second call to get from buffer, size before second call " << resize_control.length() << std::endl ;
        b.get(resize_control);
        std::cout << "size is " << resize_control.length() << ", backend store size is " << resize_control.buffer_size() << std::endl ;

        std::cout << "--------------------------------------" << std::endl << std::endl ;
        std::cout << copy.what() << std::endl;
        long len = 5;                  //copy.length();
        char *cav = new char[len];
        copy.get_char_array ( cav, len );
        for ( int x = 0; x < len; x++ ) {
          std::cout << "'"<< cav[x]<<"',";
        }
        std::cout << std::endl;

        std::cout << "Setting (update) empid value: " << std::endl;
        empid = 22;
        b.set ( empid );
        b.print ();

        std::cout << "size : " << b.size();
        b.pack ();
        std::cout << ", after pack: " << b.size() << std::endl;

        std::cout << "atmi::buffer (in the end): " << b.used() << "/" << b.unused() <<", size: " << b.size() << ", chksum: " << b.chksum() <<  std::endl;

        std::cout << "wrapping atmi::buffer." << std::endl ;
        atmi::buffer wrapper ( b.get_buffer());
        nom = "this was added into a wrapper instance of atmi::buffer.";
        wrapper.set (nom );
        wrapper.print ();

        std::cout << "transforming a atmi::buffer into a wrapped buffer." << std::endl;
        atmi::buffer wrapper1;
        wrapper1.set_buffer ( wrapper.get_buffer());
        prenom = "this was set by a wrapper";
        wrapper1.set ( prenom );
        wrapper1.print();

      }catch ( atmi::buffer_exception &err ) {
        std::cerr << err.what() << ". Ferror : " << err.error() <<std::endl;
      } catch ( atmi::atmi_exception &err ) {
        std::cerr << err.what() << std::endl;
      } catch ( std::exception &err ) {
        std::cerr << err.what() << std::endl;
      }

      return 9999;
    }

};

// program main -------------------------------------------------

int main ( int argc, char **argv ) {

  try {

    std::cout << "atmi::buffer sample program (" << atmi::cpp_atmi_version() <<")." << std::endl;
    buffer_test btest;

    fields f;
    _field<std::string> v(EMPNAME);

    prenom_t prenom ;
    prenom = "hello prenom_t" ;
    std::cout << prenom.what() <<" " << prenom << "." << std::endl;
    atmi::buffer buffer;
    buffer.set(prenom);
    buffer.print();

    std::cout << ", starting up" ;
    btest.run ( argc, argv );

  } catch ( atmi::atmi_exception &err){
    std::cerr << std::endl << err.what() << std::endl;
  } catch ( std::exception &err ) {
    std::cerr << std::endl << err.what() << std::endl;
  }
  std::cout << ", done." << std::endl;

  return 0;
}
