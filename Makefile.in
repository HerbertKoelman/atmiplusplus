# Build @PACKAGE_STRING@
#
# @configure_input@
#
# C++ encapsulation of ATMI and a set of tools to help write Tuxedo applications.

prefix=@prefix@
exec_prefix=@exec_prefix@
LIBDIR=@libdir@
INCLUDEDIR=@includedir@/atmi

INSTALL=@INSTALL@ 
LOCALEDIR=@localedir@
LIBDIR=@libdir@

RM=@RM@
DOXYGEN=@DOXYGEN@
CODECHECK=@CODECHECK@
MKDIR=@MKDIR_P@

PACKAGE=@PACKAGE_NAME@-v@PACKAGE_VERSION@-@build_os@.tar.gz

HEADERS=@HEADERS@
CPPATMILIBS=libatmi++.a libcltatmi++.a libfml++.a

all:
	(cd src && $(MAKE) all )

#demos:
#	cd samples/atmi++ ; $(MAKE) globber all clean
#	cd samples/utl ; $(MAKE) globber all clean

pkg:
	$(MKDIR) distrib
	tar cf - `git ls-files`  | gzip -c > distrib/$(PACKAGE)

clean:
	( cd src && make clean )

globber:clean
	${RM} -R doc html man autom4te.cache
	${RM} confdefs.h config.status include/atmi++.h autom4te.cache
	(cd src && $(MAKE) globber)

doxygen:
	${DOXYGEN}

codecheck:
	$(CODECHECK)

version:
	autoconf && ( cd src && autoconf )
	-echo "don't forget to run configure."

install: lib/libatmi++.a lib/libcltatmi++.a lib/libfml++.a
	cd include/atmi && $(MKDIR) $(INCLUDEDIR) $(INSTALL) *.hpp *.h $(INCLUDEDIR)
	cd lib && $(INSTALL) $(CPPATMILIBS) @libdir@

uninstall:
	$(RM) -R  $(INCLUDEDIR)
	(cd @libdir@ && $(RM) ${CPPATMILIBS})
