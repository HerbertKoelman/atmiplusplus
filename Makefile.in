# Build @PACKAGE_STRING@
#
# @configure_input@
#
# C++ encapsulation of ATMI and a set of tools to help write Tuxedo applications.

prefix=@prefix@
INSTALL=@INSTALL@ 
LOCALEDIR=@localedir@
RM=@RM@
DOXYGEN=@DOXYGEN@
PACKAGE=@PACKAGE_NAME@-v@PACKAGE_VERSION@-@build_os@.tar.gz

all: atmi++ 

demos:
	cd samples/atmi++ ; $(MAKE) globber all clean
#	cd samples/utl ; $(MAKE) globber all clean

atmi++:
	cd src ; $(MAKE) globber all clean

pkg:
	$(MKDIR) distrib
	tar cf - `git ls-files`  | gzip -c > distrib/$(PACKAGE)

clean:
	( cd src && make clean )

globber:clean
	${RM} -R html man autom4te.cache
	${RM} html man confdefs.h config.status include/atmi++.h autom4te.cache
	(cd src && $(MAKE) globber)

doxygen:
	${DOXYGEN}

install:
	${INSTALL} lib/libatmi++.a ${prefix}/lib/libatmi++.a
	${INSTALL} lib/libcltatmi++.a ${prefix}/lib/libcltatmi++.a
	${INSTALL} lib/libfml++.a ${prefix}/lib/libfml++.a
	${INSTALL} -d ${LOCALEDIR}/en_US ${LOCALEDIR}/fr_FR
	${INSTALL} locale/en_US/atmi++.cat ${LOCALEDIR}/en_US/atmi++.cat
	${INSTALL} locale/fr_FR/atmi++.cat ${LOCALEDIR}/fr_FR/atmi++.cat
	for header in include/atmi/*.h include/atmi/*.hpp ; do \
		${INSTALL} $$header ${prefix}/$$header ;\
	done

uninstall:
	${RM} ${prefix}/lib/libatmi++.a
	${RM} ${prefix}/lib/libcltatmi++.a
	${RM} ${prefix}/lib/libfml++.a
	${RM} ${prefix}/include/atmi
	${RM} ${LOCALEDIR}/en_US/atmi++.cat
	${RM} ${LOCALEDIR}/fr_FR/atmi++.cat

