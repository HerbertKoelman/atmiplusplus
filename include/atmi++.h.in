/*
  $Id$

  Helper class for dealing with tuxedo.
*/

/*
 * ATMI++
 *
 * Copyright (C) 2006 - herbert koelman
 *
 * Tuxedo is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Logging Tuxedo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuxedo; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */

/** @mainpage C++ wrapper of Tuxedo's Application-to-Transaction Monitor Interface (ATMI) library
 *
 * @section what_it_does What it does
 *
 * ATMI, for Application-to-Transaction Monitor Interface, is the main API for the Tuxedo system. It includes transaction 
 * management functions (routines, verbs); request/response, conversational, queuing, and publish-and-subscribe message-handling
 * functions; service interface functions; and buffer management functions for distributed application communication.
 *
 * ATMI++ is a C++ wrapping of this API,  adding strong typing of FML buffers and adding the use of exceptions to detect and handle error conditions. 
 * This should help making it easier to write fast and rock solid Tuxedo software.
 * 
 * This project is currently hosted <a href="http://herbertkoelman.github.com/atmiplusplus">here</a>.
 *
 * @section what_it_implements What it implements
 *
 * The ATMI++ comes as the following list of libraries:
 *  - atmi++.a : set of classes to handle ATMI calls in C++ programs
 *     - atmi::Tuxedo class : base class offers access to common function (like memory allocation).
 *     - atmi::Tp class: extends Tuxedo class with calls dedicated to transaction processing
 *     - atmi::Queue class : extends Tuxedo class with calls dedicated to queuing operations.
 *     - atmi::Event class : extends Tuxedo class with calls dedicated to notifying and broadcasting operations.
 *     - atmi::TuxedoException class : extends Tuxedo class with calls dedicated to notifying and broadcasting operations.
 *
 *  - fml++.a : set of classes to handle Fielded Buffers (FML) calls in C++ programs
 *     - atmi::Buffer class : Handle field buffer memory.
 *     - atmi::Field class: base class to manipulate Fields. This is an virtual pure class.
 *     - atmi::TField < > class templates : 
 *
 *  - atmiutl++.a : set of helper classes to handle concurrency and multithreading
 *     - Thread class: wrapper of the POSIX Threading library
 *     - ThreadPool class: pre-allocated Threads
 *     - Pipe class: coordonated way to pass messages among Threads
 *     - Barrier class: handles a point of synchronization (rendez-vous) among Threads
 *     - Mutex class: wrapper to POSIX Mutex handling functions.
 *     - Condition class: wrapper to POSIX Condition handling functions.
 *     - YamlParser: helps to parse YAML formatted conf file.
 *
 * @section setting_things_up Setting things up
 *
 *     $ configure
 *     $ make
 * 
 * The library comes with sample code that are gathered into the samples directory. You can build them using 
 * 
 *     $ make demos
 *
 * This documentation is obtained :
 *
 *     $ make doxygen
 *
 * Suggestions or bug reporting can be done <a href="mailto:herbert.koelman@me.com">here</a>
 *
 * @section depends_on Dependencies
 *
 * The project depends on :
 * - libyaml available <a href="http://pyyaml.org/wiki/LibYAML">here</a> 
 *
 *
 * @author herbert koelman, eric belloni
 *
 */


/* autoconf section ----------------------------------------------------------------------*/
#undef ATMI_VERSION

#undef _DEBUG_

/* Define to 1 if you have the `gettimeofday' function. */
#undef HAVE_GETTIMEOFDAY

/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define to 1 if you have the `pthread' library (-lpthread). */
#undef HAVE_LIBPTHREAD

/* Define to 1 if you have the `tux' library (-ltux). */
#undef HAVE_LIBTUX

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H

/* Define to 1 if you have the <strings.h> header file. */
#undef HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/time.h> header file. */
#undef HAVE_SYS_TIME_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H

/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Define as the return type of signal handlers (`int' or `void'). */
#undef RETSIGTYPE

/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS

/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
#undef TIME_WITH_SYS_TIME

/* Define to empty if `const' does not conform to ANSI C. */
#undef const

/* Define to `__inline__' or `__inline' if that's what the C compiler
   calls it, or to nothing if 'inline' is not supported under any name.  */
#ifndef __cplusplus
#undef inline
#endif

#ifndef _ATMI_PLUS_PLUS_H_
#define _ATMI_PLUS_PLUS_H_

#include <userlog.h>
#include <signal.h>
#include <Usignal.h>

#include <Exceptions.h>
#include <Tuxedo.h>
#include <Buffers.h>

#endif
