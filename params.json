{
  "name": "Atmi++",
  "tagline": "Tuxedo ATMI C++ wrapper",
  "body": "## C++ ATMI wrapper\r\n\r\n### What it does\r\n\r\nATMI, for Application-to-Transaction Monitor Interface, is the main API for the Tuxedo system. It includes transaction \r\nmanagement functions (routines, verbs); request/response, conversational, queuing, and publish-and-subscribe message-handling\r\nfunctions; service interface functions; and buffer management functions for distributed application communication.\r\n\r\nATMI++ is a C++ wrapping of this API,  adding strong typing of FML buffers and adding the use of exceptions to detect and handle error conditions. \r\n\r\nThis should help making it easier to write fast and rock solid Tuxedo software.\r\n\r\nThis project is currently hosted <a href=\"http://herbertkoelman.github.com/cpp-atmi\">here</a>.\r\n\r\n### Setting things up\r\n\r\n    $ configure\r\n    $ make\r\n\r\nDocumentation is obtained with this command:\r\n\r\n    $ make doxygen\r\n\r\nThe library is documented [here](http://herbertkoelman.github.io/cpp-atmi/doc/html/).\r\n\r\n###  How it's used\r\n\r\nThis code creates a FML field and passes it to a service called `XATOUPPER`. If anything goes wrong, we roll back the transaction and pass the exception (`throw`) so that the diagnostic messages can be displayed.\r\n\r\n        ...\r\n        transaction tp ( \"XATOUPPER\" );\r\n        int urcode = 0;\r\n\r\n        try {\r\n\r\n          buffer buffer;\r\n\r\n          Tfield<string> name ( \"EMPNAME\" );\r\n          name = (string) \"Herbert.Koelman@me.com\";\r\n\r\n          buffer.add ( &name );\r\n\r\n          printf (\"Calling service TOUPPER (%s), context: %d.\\n\", name.c_str() , name());\r\n\r\n          try {\r\n\r\n            tp.begin();\r\n\r\n            int ret = tp.call ( &buffer );\r\n            switch (ret) {\r\n              case 0:\r\n                break;\r\n              case -1:\r\n                printf (\"TOUPPER returned TPFAIL.\\n\" );\r\n                break;\r\n              default:\r\n                printf ( \"TOUPPER returned: %d (error: %d/%d).\\n\", ret, tp.error());\r\n                buffer.print();\r\n            }\r\n\r\n            buffer.get ( &name );\r\n            printf ( \"Call returned: %s.\\n\", name.c_str() );\r\n\r\n            tp.commit();\r\n          } catch ( ... ){\r\n            tp.abort();\r\n            throw;\r\n          }\r\n\r\n        } catch ( tuxedo_exception& err ) {\r\n          printf ( \"Tuxedo Exception catched. tpcall failed. %s\\n\", err.what() ); \r\n        };\r\n        ...\r\n\r\n### License\r\n\r\n-------------------------------------------------------------------\r\n\r\n ATMI++ is free software, you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation; either version 2 of the License, or\r\n (at your option) any later version.\r\n\r\n ATMI++ is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\n along with ATMI++; if not, write to the Free Software\r\n Foundation, Inc., 51 Franklin St, Fifth Floor,\r\n Boston, MA  02110-1301  USA\r\n\r\n-------------------------------------------------------------------\r\nCopyright (C) 2016 - herbert koelman\r\n\r\n",
  "google": "atmi c++ oracle bea tuxedo oltp",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}