#include "options.hpp"
#include <atmi/atmi++.hpp>
#include <cstdlib>
#include <ostream>
#include <fstream>
#include <csignal>

bool running = true ;

void signal_handler( int signal ){ //NOSONAR what the heck is this warning !?
    running=false;
}

/** export messages found in a given queue
 *
 */
class queue_export: public atmi::abstract_client {
  public:

    queue_export(const char *pname, const char *user, const char *sys_passwd, const char *app_passwd, const char *group, int wait = 0 ):
      abstract_client(pname, user, sys_passwd, app_passwd, group){
    }

    int run (const char *qspace, const char *queue, size_t buffer_size, std::ostream &out, bool daemon) {

      auto status = EXIT_FAILURE;

      try {

#       ifdef DEBUG
        printf("DEBUG %s: exporting messages found in queue [%s] from queue space [%s], daemon mode %s, buffer size: %d bytes\n", __FUNCTION__,
            queue,
            qspace,
            daemon ? "true" : "false",
            buffer_size);
#       endif

        atmi::queue_ptr q = new_queue_instance(qspace, queue);
        q->set_message_wait(false); // don't wait for messages

        long counter = 0;

        atmi::queue_stream qs(*q, buffer_size);
        do {
          out << qs ; // write messages
          out.flush();

          counter += qs.count();

#       ifdef DEBUG
        printf("DEBUG %s (line %d): flushed stream, running %s, daemon %s\n", __FUNCTION__, __LINE__,
          running ? "true" : "false",
          daemon  ? "true" : "false"
          );
#       endif
        }while( running && daemon);

        std::cerr << "exported " << counter << " messages from " << queue << "." << std::endl ;

        status = EXIT_SUCCESS ;

      } catch ( std::exception &err ){
        std::cerr << err.what() << std::endl ;
      }

#     ifdef DEBUG
      std::cout << "type enter to exit." << std::endl;
      std::string buffer;
      std::getline (std::cin,buffer);
#     endif

      return status ;
    }
};

int main ( int argc, char *argv[] ){

  auto status = EXIT_FAILURE ;
  try {

    signal(SIGINT, signal_handler);
    char *pname = basename(argv[0]);

    export_options options;
    options.parse(argc, argv);

    if ( (options.qspace != NULL) && (options.queue != NULL) ){
      queue_export qexport(pname, options.user, options.sys_passwd, options.app_passwd, options.group);
      if ( options.output_file != NULL ) {
        std::ifstream file;
        file.open(options.output_file,std::ofstream::out | std::ofstream::app);
        if (file.is_open()){
          std::ostream out(file.rdbuf());
          status = qexport.run(options.qspace, options.queue, options.buffer_size, out, options.daemon);
        } else {
          perror("failed to open export destination file");
        }
      } else {
        std::ostream out(std::cout.rdbuf()); // fall back to stdou
        status = qexport.run(options.qspace, options.queue, options.buffer_size, out, options.daemon);
      }

    }else{
      std::cerr << "missing arguments, please provide a queue space and queue name (-q)." << std::endl;
      options.usage(pname, "send messages found in a queue to stdout or a file (if last argument is passed).");
    }

  }catch ( std::exception &err){
    std::cerr << err.what() << std::endl ;
  }

  return status ;
}
