/*
 * tmreboot is a tuxedo client that restart server using MIB calls
 *
 * environmen
 * FLDTBLDIR=$TUXDIR/udataobj
 * FIELDTBLS=tpadm,evt_mib
 *
 * Return codes EXIT_SUCCESS or EXIT_FAULED
 */

#include <cstdio>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <atmi/atmi++.hpp>
#include "options.hpp" // basename, class options
#include <tpadm.h>
#include <evt_mib.h>
#include <userlog.h>
#include <sstream> // std::stringstream

enum server_state {
  ACTIVE,
  INACTIVE
};

/** search servers entries and stop/start them.
 *
 * @since v4.6.0
 */
class domain: public atmi::abstract_client {
  public:

    /** connect to Tuxedo domain and setup class.
     *
     * this client uses a privileged user which avoids authentication.
     *
     * @param pname program name
     */
    explicit domain(const char *pname):
      abstract_client("tpsysadm", "tpsysadm", (char *) "syspass", (char *) "apppass", (char *) NULL, (char *) NULL ),
      _program_name(pname),
      _counter(0),
      _dry_run(false)
    {
      // intentional
    }

    /** reboot function
     *
     * @param server_name server name
     * @param server_id server ID
     * @param group server group
     * @param sequence boot sequence
     * @return number servers successfully restarted.
     */
    void reboot(const char *server_name, const int server_id, const char *group, const int sequence, const char *lmid){

      try {
        atmi::buffer entries(Fneeded32(6, 1024));

        atmi::transaction_ptr MIB = new_transaction_instance(".TMIB"); // MIB service

        atmi::Tfield<std::string> ta_operation(TA_OPERATION);
        atmi::Tfield<std::string> ta_class(TA_CLASS);
        atmi::Tfield<long>        ta_flags(TA_FLAGS);
        atmi::Tfield<std::string> ta_state(TA_STATE);

        // search criterions
        atmi::Tfield<std::string> ta_servername(TA_SERVERNAME);
        atmi::Tfield<long>        ta_srvid(TA_SRVID);
        atmi::Tfield<long>        ta_sequence(TA_SEQUENCE);
        atmi::Tfield<std::string> ta_srvgrp(TA_SRVGRP);
        atmi::Tfield<std::string> ta_lmid(TA_LMID);

        atmi::Tfield<long>        ta_more(TA_MORE);
        atmi::Tfield<long>        ta_occurences(TA_OCCURS);
        atmi::Tfield<long>        ta_error(TA_ERROR); // error code (TA_ERROR != 1 means failed)
        atmi::Tfield<std::string> ta_status(TA_STATUS);

        ta_class = "T_SERVER" ;
        ta_state = "ACT";
        ta_flags = MIB_LOCAL ; // this let the MIB query return the statistics of each server found (set 0 if not required)
        ta_operation = "GET"; // first call -> GET, next calls -> GETNEXT

        entries.set(ta_flags);
        entries.set(ta_class);
        entries.set(ta_state);
        entries.set(ta_operation);

        if ( server_name != NULL ){ ta_servername = server_name ; entries.set(ta_servername);}
        if ( server_id   != 0 )   { ta_srvid = server_id ; entries.set(ta_srvid);}
        if ( sequence    != 0 )   { ta_sequence = sequence ; entries.set(ta_sequence);}
        if ( group       != NULL ){ ta_srvgrp = group ; entries.set(ta_srvgrp);}
        if ( lmid        != NULL ){ ta_lmid = lmid ; entries.set(ta_lmid);}

        do{
          // serahc for server entires.
          MIB->call(entries);
          entries.get(ta_error);
          if ( ta_error < 0 ){
            entries.print();
            entries.get(ta_status);
            fprintf(stderr,"error %d, %s\n", (long)ta_error, ta_status.c_str());
          }

          entries.get(ta_more);
          if ( ta_more > 0 ) {
            ta_operation = "GETNEXT" ;
            entries.set(ta_operation);
          }

          entries.get(ta_occurences);

          for ( long occurence = ta_occurences - 1 ; occurence >= 0 ; occurence--){
            entries.get(ta_servername, occurence);
            entries.get(ta_srvid, occurence);
            entries.get(ta_srvgrp, occurence);
            //entries.print();

            if ( ta_srvid == 0 ){
              std::cerr << "cannot restart BBL" << std::endl;
            } else {
              if ( _dry_run ){
                _counter++ ; // increment the number of restarted server
                printf ("DRY RUN would have restarted server %s (srvid: %d, group: %s)\n", basename((char *)ta_servername.c_str()), (long) ta_srvid, ta_srvgrp.c_str());
              } else {
                printf ("restarting server %s (srvid: %d, group: %s)\n", basename((char *)ta_servername.c_str()), (long) ta_srvid, ta_srvgrp.c_str());
                stop (ta_srvid, ta_srvgrp);
                start(ta_srvid, ta_srvgrp);
                _counter++ ; // increment the number of restarted server
              }
            }
          }
        } while( ta_more > 0 ) ;

        // entries.print();

      } catch ( std::exception &err ){
        std::cerr << "reboot failed: " << err.what() << std::endl;
      }
    }

    /** changes state of given server to ACTIVE
     *
     * @param server_id server ID
     * @param group server's group name
     */
    void stop( int server_id, const std::string &group){

      change_server_state("INACTIVE", server_id, group) ;
    }

    /** changes state of given server to INACTIVE
     *
     * @param server_id server ID
     * @param group server's group name
     */
    void start( int server_id, const std::string &group){

      change_server_state("ACTIVE", server_id, group) ;
    }

    void change_server_state( const std::string &state, int server_id, const std::string &group){

      atmi::buffer query;
      atmi::Tfield<std::string> ta_status(TA_STATUS);

      try{
        atmi::transaction_ptr MIB = new_transaction_instance(".TMIB"); // MIB service

        atmi::Tfield<std::string> ta_operation(TA_OPERATION);
        atmi::Tfield<std::string> ta_class(TA_CLASS);
        atmi::Tfield<std::string> ta_state(TA_STATE);
        atmi::Tfield<long>        ta_error(TA_ERROR);

        atmi::Tfield<long>        ta_srvid(TA_SRVID);
        atmi::Tfield<std::string> ta_srvgrp(TA_SRVGRP);

        ta_srvid     = server_id;
        ta_srvgrp    = group ;
        ta_operation = "SET";
        ta_class     = "T_SERVER" ;
        ta_state     = state ;

        query.set(ta_srvid);
        query.set(ta_srvgrp);
        query.set(ta_operation);
        query.set(ta_state);
        query.set(ta_class);

        MIB->call(query);

        // check if an error was reported.
        query.get(ta_error);
        if ( ta_error < 0 ){
          query.get(ta_status);
          printf ("   state change failed (%s): %s\n", state.c_str(), ta_status.c_str());
        } else {
          //printf ("   success.\n");
        }

        //query.print();

      } catch ( std::exception &err ){
        if ( query.occurences(ta_status) > 0 ){
          query.get(ta_status);
          throw atmi::atmi_exception("failed to change server state to %s. %s, %s", state.c_str(), err.what(), ta_status.c_str());
        } else {
          throw atmi::atmi_exception("failed to change server state to %s. %s", state.c_str(), err.what());
        }
      }
    }

    /** set dry run flag.
     *
     * if true then no action is taken and actions are displayed on stdout.
     *
     * @param flag dry run flag value
     */
    void set_dry_run( bool flag ){
      _dry_run = flag;
    }

    /** @return dry run flag current value.
     */
    bool get_dry_run() const {
      return _dry_run ;
    }

    long counter() const {
      return _counter ;
    }
  private:
    bool        _dry_run ;
    long        _counter ;
    std::string _program_name;
};

void print_usage( const char *pname ) {

    fprintf(stdout, "usage : %s [-n] -g grpname | -i srvid | -s srvname -o seqno | -l lmid\n\n", pname);
    fprintf(stdout, "restart server processes.\n");
    fprintf(stdout, "-g group name\n");
    fprintf(stdout, "-g logical machine name (LMID)\n");
    fprintf(stdout, "-i server ID\n");
    fprintf(stdout, "-s server name\n");
    fprintf(stdout, "-o sequence number\n");
    fprintf(stdout, "-n dry run, displays what would have been restarted.\n");
    fprintf(stdout, "-N restart only if the number of requests done is greater then this value\n");
}

/** re-create the command line is about to be run.
 *
 * @parma pname program name
 * @param argc argument coun
 * @param argv argument values
 */
void audit( const char *pname, int argc, char *argv[]){
  std::stringstream buffer ;
  buffer << pname << " ";
  for ( int x = 1 ; x < argc ; x++){
    buffer << argv[x] << " ";
  }
  buffer << std::endl;

  userlog((char *) "%s", buffer.str().c_str());
}

int main(int argc, char *argv[]) {

  auto status = EXIT_FAILURE;

  char  *group = NULL;
  char  *srvname = NULL;
  char  *lmid = NULL;
  long   srvid = 0;
  long   seqid = 0;

  const char  *pname = basename(argv[0]); // get program name

  long  nbd = 0;
  int   opt;
  int   arguments = 0; // number of command line arguments found
  bool  execute = true ; // when false no command should be executed, this is useful to handle special command line arguments (-v or -?)

  /* used by getopt line parser */
  extern char *optarg;
  extern int   optind;
  extern int   opterr;

  opt = '\0';

  try {
    // connect clien
    domain admin(pname);

    // dump command line about to be run
    audit(pname, argc, argv);

    while ((opt = getopt(argc, argv, "l:g:i:o:s:N:nv")) != -1) { // NOSONAR usual implementation
      switch(opt) {
        case 'g': // group name
          group = optarg;
          arguments++;
          break;
        case 'l': // LMID name
          lmid = optarg;
          arguments++;
          break;
        case 'i': // server ID
          srvid = atoi (optarg);
          break;
        case 'o': // boot/shutdown sequence
          seqid = atoi (optarg);
          arguments++;
          break;
        case 's': // server name
          srvname = optarg;
          arguments++;
          break;
        case 'N':
          nbd = atoi (optarg);
          if (nbd < 1) {
            fprintf (stdout, " N lower than 1 is not relevant\n");
          } else {
            fprintf (stdout, ">> only servers at least called %d times\n", nbd);
          }
          break;
        case 'n': // dry run
          userlog((char *)"dry run.");
          admin.set_dry_run(true);
          break;
        case 'v':
          fprintf(stdout, "%s %s\n", pname, atmi::cpp_atmi_version());
          execute = false;
          break;
        case ':':       /* -f or -o without operand */
          fprintf(stderr, "option -%c requires an operand\n. ", optopt);
          print_usage(pname);
          break;
        case '?':
          fprintf(stderr, "unrecognized option -%c.\n", optopt);
          print_usage(pname);
          execute = false;
          break;
        default :
          fprintf (stderr, "Unknown option ... EXITING \n");
      } /* end switch */
    }

    if ( execute && (arguments > 0)){
      admin.reboot(srvname, srvid, group, seqid, lmid);
      std::cout << admin.counter() << " processes restarted." << std::endl;
      status = EXIT_SUCCESS;
    } else {
      if ( execute && ( arguments == 0 )) { // display message only if execution was se
        fprintf(stderr, "missing argument.\n\n");
        print_usage(pname);
      }
    }

  } catch ( std::exception &err ){
    std::cerr << err.what() << std::endl ;
  }

  return(status);
}
